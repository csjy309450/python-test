#ifndef __PYTHONTOCV_H_INCLUDED__ 
#define __PYTHONTOCV_H_INCLUDED__ 
 
#include <iostream> 
#include <Python.h> 
#include <boost/python.hpp> 
#include "numpy/ndarrayobject.h"
#include "opencv2/core/core.hpp"

using namespace std;
using namespace cv;
 
////////////// ////////////////////////////////////////////////// ///////////// 
/// \brief导入Numpy数组。有必要避免PyArray_Check()崩溃
void doImport(); 
 
int failmsg(const char * fmt，...); 
 
static size_t REFCOUNT_OFFSET =(size_t)&(((PyObject *)0) - > ob_refcnt)+ 
(0x12345678！= *(const size_t *)“\ x78 \\ \\ x56 \x34\x12\0\0\0\0\0“)* sizeof(int); 
 
static inline PyObject * pyObjectFromRefcount(const int * refcount)
{
	return(PyObject *)((size_t)refcount  -  REFCOUNT_OFFSET); 
} 
 
static inline int * refcountFromPyObject(const PyObject * obj)
{
	return(int *)((size_t)obj + REFCOUNT_OFFSET); 
} 
 
class NumpyAllocator:public cv:: MatAllocator 
{
public:
	NumpyAllocator(){} 
	~NumpyAllocator(){} 
 
 void allocate(int dims，const int * sizes，int type，int *& refcount，
 uchar *& datastart，uchar *& data，size_t * step); 
 
 void deallocate(int * refcount，uchar * datastart，uchar * data); 
}; 
 
 
 //////////////////////////////////////// ///////////////////////////////////////// 
 /// \brief转换一个numpy数组到一个cv :: Mat。这用于从Python导入图像
 ///。 
 ///这个函数是从OpenCV 2.4中的opencv / modules / python / src2 / cv2.cpp 
 ///中提取的
 int pyopencv_to(const PyObject * o，cv :: Mat& m，const char * name =“< unknown>”，bool allowND = true); 
 #endif // __ PYTHONTOOCV_H_INCLUDED__ 
 
 ///PythonToOCV.cpp 
 
 #include“PythonToOpenCV.h”
 
 void doImport() 
 {
 import_array(); 
} 
 
 int failmsg(const char * fmt，...)
 {
 char str [1000]; 
 
 va_list ap; 
 va_start(ap，fmt); 
 vsnprintf(str，sizeof(str)，fmt，ap); 
 va_end(ap); 
 PyErr_SetString(PyExc_TypeError，str); 
 return 0; 
} 
 
 void NumpyAllocator :: allocate(int dims，const int * sizes，int type，int *& refcount，uchar *& datastart，uchar *& data，size_t * step)
 {
 int depth = CV_MAT_DEPTH(type); 
 int cn = CV_MAT_CN(type); 
 const int f =(int)(sizeof(size_t)/ 8); 
 int typenum = depth == CV_8U？ NPY_UBYTE:depth == CV_8S？ NPY_BYTE:
 depth == CV_16U？ NPY_USHORT:depth == CV_16S？ NPY_SHORT:
 depth == CV_32S？ NPY_INT:depth == CV_32F？ NPY_FLOAT:
 depth == CV_64F？ NPY_DOUBLE:f * NPY_ULONGLONG +(f ^ 1)* NPY_UINT; 
 int i; 
 npy_intp _sizes [CV_MAX_DIM + 1]; 
 for(i = 0; i  _sizes [i] = sizes [i]; 
 if(cn> 1)
 {
 / * if(_sizes [dims-1] == 1)
 _sizes [dims-1] = cn; 
 else * / 
 _sizes [dims ++] = cn; 
} 
 PyObject * o = PyArray_SimpleNew(dims，_sizes，typenum); 
 if(！o)
 CV_Error_(CV_StsError，(“typenum的numpy数组=％d，ndims =％d不能创建”，typenum，dims) 
 refcount = refcountFromPyObject(o); 
 npy_intp * _strides = PyArray_STRIDES(o); 
 for(i = 0; i  1); i ++)
 step [i] =(size_t)_strides [i] 
 datastart = data =(uchar *)PyArray_DATA(o); 
 
} 
 
 void NumpyAllocator :: deallocate(int * refcount，uchar * datastart，uchar * data)
 {
 if(！refcount)
 return; 
 PyObject * o = pyObjectFromRefcount(refcount); 
 Py_INCREF(o); 
 Py_DECREF(o); 
} 
 
 //声明对象
 NumpyAllocator g_numpyAllocator; 
 
 int pyopencv_to(const PyObject * o，cv :: Mat&m，const char * name，bool allowND)
 {
 //避免PyArray_Check与有效的数组
 doImport(); 
 
 if(！o || o == Py_None)
 {
 if(！m.data)
 m.allocator =& g_numpyAllocator; 
 return true; 
} 
 
 if(！PyArray_Check(o))
 {
 failmsg(“％s不是numpy数组”，name); 
 return false; 
} 
 
 // NPY_LONG(64位)转换为CV_32S(32位)
 int typenum = PyArray_TYPE(o); 
 int type = typenum == NPY_UBYTE？ CV_8U:typenum == NPY_BYTE？ CV_8S:
 typenum == NPY_USHORT？ CV_16U:typenum == NPY_SHORT？ CV_16S:
 typenum == NPY_INT || typenum == NPY_LONG？ CV_32S:
 typenum == NPY_FLOAT？ CV_32F:
 typenum == NPY_DOUBLE？ CV_64F:-1; 
 
 if(type< 0)
 {
 failmsg(“％s data type =％d is not supported”，name，typenum); 
 return false; 
} 
 
 intNDims = PyArray_NDIM(o); 
 if(ndims> = CV_MAX_DIM)
 {
 failmsg(“％s dimensionity(=％d)is too high”，name，ndims); 
 return false; 
} 
 
 int size [CV_MAX_DIM + 1]; 
 size_t step [CV_MAX_DIM + 1]，elemsize = CV_ELEM_SIZE1(type); 
 const npy_intp * _sizes = PyArray_DIMS(o); 
 const npy_intp * _strrides = PyArray_STRIDES(o); 
 bool transposed = false; 
 
 for(int i = 0; i  {
 size [i] =(int)_sizes [i] 
 step [i] =(size_t)_strides [i]; 
} 
 
 if(ndims == 0 || step [ndims-1]> elemsize){
 size [ndims] = 1; 
 step [ndims] = elemsize; 
 ndims ++; 
} 
 
 if(ndims> = 2&& step [0]< step [1])$ ​​b $ b {
 std :: swap [0]，size [1]); 
 std :: swap(step [0]，step [1]); 
 transposed = true; 
} 
 
 if(ndims == 3&& size [2]< = CV_CN_MAX&&& amp; step [1] == elemsize * size [2])
 {
 ndims-- 
 type | = CV_MAKETYPE(0，size [2]); 
} 
 
 if(ndims> 2&&！allowND)
 {
 failmsg(“％s有多个维度”，name); 
 return false; 
} 
 
 m = cv :: Mat(ndims，size，type，PyArray_DATA(o)，step); 
 
 if(m.data)
 {
 m.refcount = refcountFromPyObject(o); 
 m.addref(); //保护原numpy数组不被重新分配
 //(因为Mat析构函数将递减引用计数器)
}; 
 m.allocator =& g_numpyAllocator; 
 
 if(转置)
 {
 cv :: Mat tmp; 
 tmp.allocator =& g_numpyAllocator; 
 transpose(m，tmp); 
 m = tmp; 
} 
 return true; 
} 
